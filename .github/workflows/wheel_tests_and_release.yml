# Adapted from https://github.com/scikit-image/scikit-image/blob/main/.github/workflows/wheel_tests_and_release.yml

name: Build Wheels and Release
on:
  push:
    tags:
      - 'v*'
    branches:
      - maintenance/**
      - '!main'

env:
  CIBW_BUILD_VERBOSITY: 2
  CIBW_BEFORE_BUILD: pip install numpy
  CIBW_TEST_REQUIRES: "-r requirements.txt pytest"
  CIBW_TEST_COMMAND: pytest --pyargs cesium
  CIBW_ENVIRONMENT: PIP_PREFER_BINARY=1

jobs:
  build_linux_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_manylinux: [ manylinux2014 ]
        cibw_arch: [ "x86_64", "i686" ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.10'
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_SKIP: "*-musllinux_*"
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_ENVIRONMENT_PASS_LINUX: CESIUM_LINK_FLAGS
          CESIUM_LINK_FLAGS: "-Wl,--strip-debug"
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_arch: [ "x86_64", "arm64"] #, "universal2"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.10'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for CPython Mac OS
        run: |
          export MACOSX_DEPLOYMENT_TARGET=12.0
          echo MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}

          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          CIBW_TEST_SKIP: "*-macosx_arm64"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    name: Build ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        cibw_arch: ["AMD64"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.10'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build Windows wheels for CPython
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          # Skip pypy
          CIBW_BUILD: "cp3?-*"
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}
          # -Wl,-S equivalent to gcc's -Wl,--strip-debug
          LDFLAGS: "-Wl,-S"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  deploy:
    name: Release
    needs: [build_linux_wheels, build_macos_wheels, build_windows_wheels]
    if: github.repository_owner == 'cesium-ml' && startsWith(github.ref, 'refs/tags/v') && always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.10'

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install numpy Cython twine

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: wheels
          path: ./dist

      - name: Publish the source distribution on PyPI
        run: |
          VERSION=$(git describe --tags)
          python setup.py sdist
          ls -la ${{ github.workspace }}/dist
          # We prefer to release wheels before source because otherwise there is a
          # small window during which users who pip install cesium will require compilation.
          twine upload ${{ github.workspace }}/dist/*.whl
          twine upload ${{ github.workspace }}/dist/cesium-${VERSION:1}.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

      - name: Github release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
